<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <title>Linux User Interface Libraries</title>
    <date>2019-12-14</date>
    <author>
        <firstname>Doc</firstname>
        <surname>Writer</surname>
        <email>christian.popescu@outlook.com</email>
    </author>
    <authorinitials>DW</authorinitials>
<revhistory><revision><revnumber>1.0</revnumber><date>2019-12-14</date><authorinitials>DW</authorinitials></revision></revhistory>
</articleinfo>
<section id="_linux_user_interface_libraries">
<title>Linux User Interface Libraries</title>
</section>
<section id="_gtk">
<title>Gtk</title>
<simpara>Doc Writer &lt;<ulink url="mailto:christian.popescu@outlook.com">christian.popescu@outlook.com</ulink>&gt;
v 1.0, 2019-12-05
:toc:
:safe: 0</simpara>
</section>
<section id="_gtk_2">
<title>Gtk</title>
<simpara>GTK, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces.</simpara>
<section id="_links">
<title>Links</title>
<simpara><ulink url="https://www.gtk.org/">Gtk home page</ulink></simpara>
</section>
</section>
<section id="_working_with_gtk">
<title>Working with Gtk+</title>
<section id="_msys2_mingw_64">
<title>MSYS2 / MINGW-64</title>
<itemizedlist>
<listitem>
<simpara>
Install <emphasis role="strong">GTK3</emphasis> and its dependencies.
Open MSYS2 shell and run:
</simpara>
<literallayout class="monospaced">pacman -S mingw-w64-x86_64-gtk3</literallayout>
</listitem>
<listitem>
<simpara>
(recommended): Install GTK core applications
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Glade</emphasis> is a GUI designer for GTK. It lets you design your GUI and export it in XML format. You can then import your GUI from your code using the GtkBuilder API.
        g++ &lt;programname&gt;.cc -lncurses -I/mingw64/include/ncurses
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>To install <emphasis role="strong">Glade</emphasis>:</simpara>
<literallayout class="monospaced">pacman -S mingw-w64-x86_64-glade</literallayout>
<itemizedlist>
<listitem>
<simpara>
<emphasis role="strong">Devhelp</emphasis> is a help browser. It lets you easily navigate offline in the GTK, glib and gobject API help relative to the version of these libraries installed on your system.
</simpara>
</listitem>
</itemizedlist>
<simpara>To install <emphasis role="strong">Devhelp</emphasis>:</simpara>
<literallayout class="monospaced">pacman -S mingw-w64-x86_64-devhelp</literallayout>
</section>
<section id="_links_2">
<title>Links</title>
<simpara><ulink url="https://www.gtk.org/download/windows.php">install on windows</ulink></simpara>
</section>
<section id="_quick_example">
<title>Quick example</title>
<programlisting language="c" linenumbering="unnumbered">#include &lt;gtk/gtk.h&gt;

static void
print_hello (GtkWidget *widget,
             gpointer   data)
{
  g_print ("Hello World\n");
}

static void
activate (GtkApplication *app,
          gpointer        user_data)
{
  GtkWidget *window;
  GtkWidget *button;
  GtkWidget *button_box;

  window = gtk_application_window_new (app);
  gtk_window_set_title (GTK_WINDOW (window), "Window");
  gtk_window_set_default_size (GTK_WINDOW (window), 400, 400);

  button_box = gtk_button_box_new (GTK_ORIENTATION_HORIZONTAL);
  gtk_container_add (GTK_CONTAINER (window), button_box);

  button = gtk_button_new_with_label ("Hello World");
  g_signal_connect (button, "clicked", G_CALLBACK (print_hello), NULL);
  g_signal_connect_swapped (button, "clicked", G_CALLBACK (gtk_widget_destroy), window);
  gtk_container_add (GTK_CONTAINER (button_box), button);

  gtk_widget_show_all (window);
}

int
main (int    argc,
      char **argv)
{
  GtkApplication *app;
  int status;

  app = gtk_application_new ("org.gtk.example", G_APPLICATION_FLAGS_NONE);
  g_signal_connect (app, "activate", G_CALLBACK (activate), NULL);
  status = g_application_run (G_APPLICATION (app), argc, argv);
  g_object_unref (app);

  return status;
}</programlisting>
<simpara>Compiling and build:</simpara>
<literallayout class="monospaced">gcc `pkg-config --cflags gtk+-3.0` -o TestGtk TestGtk.c `pkg-config --libs gtk+-3.0`</literallayout>
</section>
</section>
<section id="_gtkmm">
<title>GTKMM</title>
<simpara><emphasis role="strong">gtkmm</emphasis> is the official C++ interface for the popular GUI library <emphasis role="strong">GTK+</emphasis>. Highlights include typesafe callbacks, and a comprehensive set of widgets that are easily extensible via inheritance.</simpara>
<simpara><ulink url="https://www.gtkmm.org/en/">Home Page GTKMM</ulink></simpara>
<section id="_working_in_msys2_mingw_64_environment">
<title>Working in MSYS2 / MINGW-64 environment</title>
<simpara><ulink url="https://wiki.gnome.org/Projects/gtkmm/MSWindows">https://wiki.gnome.org/Projects/gtkmm/MSWindows</ulink></simpara>
<itemizedlist>
<listitem>
<simpara>
To install the library
</simpara>
<literallayout class="monospaced">pacman -S mingw-w64-x86_64-gtkmm3</literallayout>
</listitem>
<listitem>
<simpara>
To install
</simpara>
<literallayout class="monospaced">pacman -S pkg-config</literallayout>
</listitem>
</itemizedlist>
</section>
<section id="_quick_example_2">
<title>Quick example</title>
<programlisting language="c++" linenumbering="unnumbered">#include &lt;gtkmm.h&gt;

int main(int argc, char** argv)
{
        auto app = Gtk::Application::create(argc, argv);

        Gtk::Window window;
        window.set_default_size(600,400);

        return app-&gt;run(window);
}</programlisting>
<simpara>Compile :</simpara>
<literallayout class="monospaced">g++ -std=c++11 TestGtkmm.cc -o TestGtkmm.exe $(pkg-config gtkmm-3.0 --cflags --libs | sed 's/ -I/ -isystem /g')</literallayout>
</section>
</section>
<section id="_ncurses">
<title>NCurses</title>
<simpara>Doc Writer &lt;<ulink url="mailto:christian.popescu@outlook.com">christian.popescu@outlook.com</ulink>&gt;
v 1.0, 2019-12-02
:toc:</simpara>
</section>
<section id="_ncurses_library">
<title>NCurses library</title>
<simpara>The Ncurses (new curses) library is a free software emulation of curses in System V Release 4.0 (SVr4), and more.
 It uses <emphasis role="strong">terminfo</emphasis> format, supports pads and color and multiple highlights and forms characters and function-key mapping.</simpara>
<section id="_links_3">
<title>Links</title>
<simpara><ulink url="https://www.gnu.org/software/ncurses/">GNU ncurses</ulink></simpara>
<simpara>The ncurses distribution is available at ncurses
<ulink url="https://invisible-island.net/ncurses/">homepage</ulink></simpara>
</section>
</section>
<section id="_working_with_ncurses_library">
<title>Working with Ncurses library</title>
<section id="_mingw_64">
<title>MINGW-64</title>
<itemizedlist>
<listitem>
<simpara>
Set environment variables:
</simpara>
<literallayout class="monospaced">export TERMINFO="/usr/share/terminfo"</literallayout>
</listitem>
<listitem>
<simpara>
Simple build command line
</simpara>
<literallayout class="monospaced">g++ &lt;programname&gt;.cc -lncurses -I/mingw64/include/ncurses</literallayout>
</listitem>
<listitem>
<simpara>
Simple "Hello world!" program.
</simpara>
<literallayout class="monospaced">(Source: ncurses-6.1/doc/html/NCURSES-Programming-HOWTO.html#HELLOWORLD)</literallayout>
<programlisting language="c++" linenumbering="unnumbered">#include &lt;ncurses.h&gt;
int main()
{
        initscr(); /* Start curses mode */
        printw("Hello World !!!"); /* Print Hello World*/
        refresh(); /* Print it on to the real screen */
        getch(); /* Wait for user input */
        endwin(); /* End curses mode */
        return 0;
}</programlisting>
</listitem>
</itemizedlist>
</section>
</section>
</article>
